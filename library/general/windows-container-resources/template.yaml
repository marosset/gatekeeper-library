apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8swindowscontainerresources
  annotations:
    description: |
      This constraint template enforces the following for Windows pods:
        - Ensure that all containers set resources limits
        - Ensure that that for all containers, if resource requests are set then they match limits
      Resource management and eviction for Windows containers works much different than Linux containers and
      these policies will help to ensure Windows workloads will remain responsive during operation.
      For more information please refer to https://kubernetes.io/docs/setup/production-environment/windows/intro-windows-in-kubernetes/#resource-reservations
spec:
  crd:
    spec:
      names:
        kind: K8sWindowsContainerResources
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8swindowscontainerresources

        violation[{"msg":msg}] {
            is_windows_pod
            container := input_containers[_]
            not has_limits(container)
            msg := sprintf("Container <%v> has missing resource limits", [container.name])
        }

        violation[{"msg":msg}] {
            is_windows_pod
            container := input_containers[v]
            requests_do_not_match_limits(container)
            msg := sprintf("Container <%v> sets reource requests that do not match limits", [container.name])
        }

        is_windows_pod {
            ns := input.review.object.spec.nodeSelector
            ns["kubernetes.io/os"] == "windows"
        }

        has_limits(c) {
            get_cpu_limit(c)
            get_mem_limit(c)
        }

        requests_do_not_match_limits(c) {
            # Tests that cpu requests match limits if specified
            r := get_cpu_request(c)
            l := get_cpu_limit(c)
            r != null
            l != null
            r != l
        }
        requests_do_not_match_limits(c) {
            # Tests that mem requests match limits if specified
            r := get_mem_request(c)
            l := get_mem_limit(c)
            r != null
            l != null
            r != l
        }

        get_cpu_limit(c) = out {
            out := c.resources.limits.cpu
        }

        get_cpu_request(c) = out {
            out := c.resources.requests.cpu
        }

        get_mem_limit(c) = out {
            out := c.resources.limits.mem
        }

        get_mem_request(c) = out {
            out := c.resources.requests.mem
        }

        input_containers[c] {
            c := input.review.object.spec.containers[_]
        }
        input_containers[c] {
            c := input.review.object.spec.initContainers[_]
        }
